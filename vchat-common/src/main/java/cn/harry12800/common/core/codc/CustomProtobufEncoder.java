package cn.harry12800.common.core.codc;import cn.harry12800.common.core.packet.base.Packet;import cn.harry12800.common.core.util.PbUtil;import io.netty.buffer.ByteBuf;import io.netty.channel.ChannelHandler.Sharable;import io.netty.channel.ChannelHandlerContext;import io.netty.handler.codec.MessageToByteEncoder;/** * 参考 ProtobufVarint32LengthFieldPrepender 和 ProtobufEncoder */@Sharablepublic class CustomProtobufEncoder extends MessageToByteEncoder<Packet<?>> {    @Override    protected void encode(ChannelHandlerContext ctx, Packet<?> pkt, ByteBuf out) throws Exception {        // out.writeBytes(msg, msg.readerIndex(), bodyLen);		System.out.println("zgz:开始发送数据");        System.out.println("zgz:"+pkt.body.getClass()+"");        System.out.println("zgz:"+pkt.header.getClass()+"");        byte[] headBytes = null;        try {        	System.out.println("zgz:"+pkt.header);            headBytes = PbUtil.encode(pkt.header);        } catch (Exception e) {            e.printStackTrace();        }//		System.out.println("header:lenght:" + headBytes.length);//		for (byte b : headBytes) {//			System.out.print(b + " ");//		}//		System.out.println();        int headLen = headBytes.length;        int headLenLen = computeRawVarint32Size(headLen);        byte[] bodyBytes = null;        try {            bodyBytes = PbUtil.encode(pkt.body);        } catch (Exception e) {            e.printStackTrace();        }//		System.out.println("body:lenght:" + bodyBytes.length);//		for (byte b : bodyBytes) {//			System.out.print(b + " ");//		}//		System.out.println();        int bodyLen = bodyBytes.length;        try {            int bodyLenLen = computeRawVarint32Size(bodyLen);            out.ensureWritable(headLen + bodyLen + headLenLen + bodyLenLen);            writeRawVarint32(out, headLen+bodyLen+headLenLen);            writeRawVarint32(out, headLen);            out.writeBytes(headBytes);            out.writeBytes(bodyBytes);        }catch (Exception e){            e.printStackTrace();            System.out.println("zgz:发送报错！"+e.getMessage());        }        System.out.println("zgz:发送完成！");        return;    }    /**     * Writes protobuf varint32 to (@link ByteBuf).     *     * @param out     *            to be written to     * @param value     *            to be written     */    static void writeRawVarint32(ByteBuf out, int value) {        while (true) {            if ((value & ~0x7F) == 0) {                out.writeByte(value);                return;            } else {                out.writeByte((value & 0x7F) | 0x80);                value >>>= 7;            }        }    }    /**     * Computes size of protobuf varint32 after encoding.     *     * @param value     *            which is to be encoded.     * @return size of value encoded as protobuf varint32.     */    static int computeRawVarint32Size(final int value) {        if ((value & (0xffffffff << 7)) == 0) {            return 1;        }        if ((value & (0xffffffff << 14)) == 0) {            return 2;        }        if ((value & (0xffffffff << 21)) == 0) {            return 3;        }        if ((value & (0xffffffff << 28)) == 0) {            return 4;        }        return 5;    }    // private byte[] encodeHeader(MessageLite msg, short bodyLength) {    // byte messageType = 0x0f;    //    // byte[] header = new byte[4];    // header[0] = (byte) (bodyLength & 0xff);    // header[1] = (byte) ((bodyLength >> 8) & 0xff);    // header[2] = 0; // 保留字段    // header[3] = messageType;    // return header;    //    // }}